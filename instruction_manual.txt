OVERVIEW: Intel(R) oneAPI DPC++/C++ Compiler

USAGE: dpcpp [options] file...

OPTIONS:
  -fintelfpga            Perform ahead of time compilation for FPGA
  -fno-sycl-dead-args-optimization
                         Disables elimination of DPC++ dead kernel arguments
  -fno-sycl-device-lib=<value>
                         Control exclusion of device libraries from device binary linkage. Valid arguments are libc, libm-fp32, libm-fp64, all
  -fno-sycl-early-optimizations
                         Disable standard optimization pipeline for SYCL device compiler
  -fno-sycl-libspirv     Disable check for libspirv
  -fno-sycl-unnamed-lambda
                         Disallow unnamed SYCL lambda kernels
  -fno-sycl-use-bitcode  Use SPIR-V instead of LLVM bitcode in fat objects
  -fno-sycl              Disables SYCL kernels compilation for device
  -fsycl-add-targets=<value>
                         Specify comma-separated list of triple and device binary image pairs to add to the final SYCL binary
  -fsycl-dead-args-optimization
                         Enables elimination of DPC++ dead kernel arguments
  -fsycl-device-code-split=<value>
                         Perform SYCL device code split: per_kernel (device code module is created for each SYCL kernel) | per_source (device code module is created for each source (translation unit)) | off (no device code split). | auto (use heuristic to select the best way of splitting device code). Default is 'auto' - use heuristic to distribute device code across modules
  -fsycl-device-code-split
                         Perform SYCL device code split in the 'auto' mode, i.e. use heuristic to distribute device code across modules
  -fsycl-device-lib=<value>
                         Control inclusion of device libraries into device binary linkage. Valid arguments are libc, libm-fp32, libm-fp64, all
  -fsycl-device-only     Compile SYCL kernels for device
  -fsycl-early-optimizations
                         Enable standard optimization pipeline for SYCL device compiler
  -fsycl-enable-function-pointers
                         Experimental Feature: Enables function pointers and support for virtual functions for DPC++ kernels and device functions.
  -fsycl-help=<value>    Emit help information from the related offline compilation tool. Valid values: all, fpga, gen, x86_64.
  -fsycl-help            Emit help information from all of the offline compilation tools
  -fsycl-host-compiler-options=<value>
                         When performing the host compilation with -fsycl-host-compiler specified, use the given options during that compile. Options are expected to be a quoted list of space separated options.
  -fsycl-host-compiler=<value>
                         Specify C++ compiler binary to perform host compilation with during SYCL offload compiles.
  -fsycl-libspirv-path=<value>
                         Path to libspirv library
  -fsycl-link-targets=<value>
                         Specify comma-separated list of triples SYCL offloading targets to produce linked device images
  -fsycl-link=<value>    Generate partially linked device and host object to be used at various stages of compilation
  -fsycl-link            Generate partially linked device object to be used with the host link
  -fsycl-targets=<value> Specify comma-separated list of triples SYCL offloading targets to be supported
  -fsycl-unnamed-lambda  Allow unnamed SYCL lambda kernels
  -fsycl-use-bitcode     Use LLVM bitcode instead of SPIR-V in fat objects
  -fsycl                 Enables SYCL kernels compilation for device
  -reuse-exe=<exe>       Speed up FPGA aoc compile if the device code in <exe> is unchanged.
  -sycl-std=<value>      SYCL language standard to compile for.
  -Xsycl-target-backend=<triple> <arg>
                         Pass <arg> to the SYCL based backend identified by <triple>.
  -Xsycl-target-backend <arg>
                         Pass <arg> to the SYCL based target backend.
  -Xsycl-target-frontend=<triple> <arg>
                         Pass <arg> to the SYCL based target frontend identified by <triple>.
  -Xsycl-target-frontend <arg>
                         Pass <arg> to the SYCL based target frontend.
  -Xsycl-target-linker=<triple> <arg>
                         Pass <arg> to the SYCL based target linker identified by <triple>.
  -Xsycl-target-linker <arg>
                         Pass <arg> to the SYCL based target linker.
  -Xs <arg>              Pass <arg> to the offline compiler.
  -Xs<arg>               Pass <arg> to the offline compiler, adding the option specifier '-' to the <arg>.

Help displayed is for DPC++ specific options.
Use '-help -v' to display more options.
